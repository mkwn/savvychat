<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>

<!--two icon tags because there's a quirk in chrome where the favicon will not change unless both the icon and shortcut icon tags are changed-->
<link rel="shortcut icon" id="sicon" href="favicon.ico" />
<link rel="icon" id="icon" href="favicon.ico" />

<!--This is for mobile browsers-->
<meta name="viewport" content="width=device-width, initial-scale=1">

<link type="text/css" rel="stylesheet" href="/stylesheets/main.css" />
<link type="text/css" rel="stylesheet" href="/stylesheets/base.css" />
<link type="text/css" rel="stylesheet" href="/stylesheets/themes/{{ theme }}.css" />

<script type="text/javascript" src="jquery-1.9.1.min.js"></script>
<script type="text/javascript" src='/_ah/channel/jsapi'></script>

{% if not disableMath %}
<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/1.1-latest/MathJax.js">
MathJax.Hub.Config({
        extensions: ["tex2jax.js","TeX/AMSmath.js", "TeX/AMSsymbols.js", "TeX/autobold.js","TeX/noUndefined.js"],
		{% if gadget %}
		messageStyle: "none",
		{% endif %}
		skipStartupTypeset: true,
        jax: ["input/TeX", "output/HTML-CSS"],
        tex2jax: {
            inlineMath: [ ["\\(","\\)"] ],
            displayMath: [ ['$$','$$'] ]
        }
    });
</script>
{% endif %}

<script type="text/javascript">
var token = '{{ token }}';
var tokenid = '{{ tokenid }}';
var userid = '{{ userid }}';
var username = '{{ name }}';
{% if playTone %}var playTone = true;{% else %}var playTone = false;{% endif %}
{% if gadget %}var gadget = true;{% else %}var gadget = false;{% endif %}
{% if gadget %}var dopreview = false;{% else %}var dopreview = true;{% endif %}
var mathpreview = true;
{% if disableMath %}var disableMath = true;{% else %}var disableMath = false;{% endif %}
var denyretrieve = true;
{% if showarchive %}var denyretrieve = false;{% else %}var denyretrieve = true;{% endif %}
{% if hf %}var verbose = true;{% else %}var verbose = false;{% endif %} //are the header and footer shown?
{% if shiftSend %}var shiftSend = true;{% else %}var shiftSend = false;{% endif %} //shift+enter or enter to send?
{% if suppressErrors %}var suppressErrors = true;{% else %}var suppressErrors = false;{% endif %}
var endquerycursor = '{{ endquerycursor }}';
var startquerycursor = '{{ startquerycursor }}';

var aliases = [];
var socket;
var checkConnectionTimeout = null;
var currPostID = 0;
var disableSend = false
var windowFocus = true;
var mute = false;

var channelWaitLeniency = 10*1000;
$.ajaxSetup({timeout:10*1000});
var connectionCheckInterval = 60*1000;

//http://stackoverflow.com/questions/3629817/getting-a-union-of-two-arrays-in-javascript
jQuery.fn.extend({
    union: function(array1, array2) {
        var hash = {}, union = [];
        $.each($.merge($.merge([], array1), array2), function (index, value) { hash[value] = value; });
        $.each(hash, function (key, value) { union.push(key); } );
        return union;
    }
});

//http://codingrecipes.com/onmouseout-fix-on-nested-elements-javascript
function is_child_of(parent, child){
	if(child != null){
		while(child.parentNode){
			if((child = child.parentNode) == parent){
				return true;
			}
		}
	}
	return false;
}
function fixOnMouseOut(element, event, JavaScript_code){
	var current_mouse_target = null;
	if(event.toElement){
		current_mouse_target = event.toElement;
	}else if(event.relatedTarget){
		current_mouse_target = event.relatedTarget;
	}
	if(!is_child_of(element, current_mouse_target) && element != current_mouse_target){
		eval(JavaScript_code);
	}
}

//http://snipplr.com/view/3561/addclass-removeclass-hasclass/
function hasClass(ele,cls) {
	return ele.className.match(new RegExp('(\\s|^)'+cls+'(\\s|$)'));
}
function addClass(ele,cls) {
	if (!this.hasClass(ele,cls)) ele.className += " "+cls;
}
function removeClass(ele,cls) {
	if (hasClass(ele,cls)) {
    	var reg = new RegExp('(\\s|^)' + cls + '(\\s|$)');
		ele.className = ele.className.replace(reg,' ');
	}
}

//http://www.geekdaily.net/2007/07/04/javascript-cross-browser-window-size-and-centering/
function windowHeight(){
	if(!window.innerWidth)	{
		//IE
		if(!(document.documentElement.clientWidth == 0)){
			//strict mode
			return document.documentElement.clientHeight;
		}else{
			//quirks mode
			return document.body.clientHeight;
		}
	}else{
		//w3c
		return window.innerHeight;
	}
}
function windowWidth(){
	if(!window.innerWidth)	{
		//IE
		if(!(document.documentElement.clientWidth == 0)){
			//strict mode
			return document.documentElement.clientWidth;
		}else{
			//quirks mode
			return document.body.clientWidth;
		}
	}else{
		//w3c
		return window.innerWidth;
	}
}

//open a communication channel
function openChannel(){
	var channel = new goog.appengine.Channel(token);
	socket = channel.open();
	socket.onopen = onOpen;
	socket.onclose = onClose;
	socket.onerror = onClose;
	socket.onmessage = onMessage;
}

//send any message to server
function sendMessage(path, data, callback, abort){
	if(!data) $.post(path);
	var success = function(response){
		if(callback) callback(response);
	};
	var fail = function(){
		if(abort) abort();
		ajaxFail(path);
	};
	$.post(path,data,success).fail(fail);
}

function closeMessage(){
	sendMessage('/_ah/channel/disconnected/', {from:tokenid});
}

//on establishing a connection
function onOpen(){
	sync();
	clearTimeout(checkConnectionTimeout);
	checkConnectionTimeout = setTimeout("heartbeat();",1000);
}

var allowSendCauses = {};
function allowSend(allow,cause){
	allowSendCauses[cause] = allow;
	for(var cause in allowSendCauses){
		if(!allowSendCauses[cause]){
			disableSend = true;
			document.getElementById('postbutton').disabled = true;
			return;
		}
	}
	disableSend = false;
	document.getElementById('postbutton').disabled = false;
}

var refreshing = false;
var inRefreshSequence = false; // true even if in the waiting period between refreshes
var refreshTimeout = null;
var connectionError = false;
var authError = false;
function refreshToken(time, bypass){
	// bypass: refresh even if in refresh sequence
	if(refreshing) return;
	if(!bypass && inRefreshSequence) return;
	if(!time) time = 1;
	refreshing = true;
	inRefreshSequence = true;
	showPreview(true);
	allowSend(false,"error");
	connectionError = true;
	authError = false
	clearTimeout(refreshTimeout);
	socket.onclose = function(){};
	socket.onerror = function(){};
	socket.close();
	var callback = function(response){
		refreshing = false;
		inRefreshSequence = false;
		var arr = response.split("@@")
		if(arr.length == 1){
			//authentication error
			authError = true;
			displayNote("Failed to authenticate. You probably logged out. [[Retry@@javascript:clearTimeout(refreshTimeout);refreshToken(1, true);]].");
			return;
		}
		setIcon("favicon.ico");
		document.title = "SavvyChat";		
		tokenid = arr.shift();
		token = arr.join("@@");
		openChannel();
		allowSend(true,"error");

		showPreview(true);
		connectionError = false;
	};
	var abort = function(){
		if(!windowFocus&&!alerted){
			if(playTone&&!mute){
				//playAlert("error");
			}
		}
		if(authError) return;
		setIcon("error.ico");
		refreshing = false;
		document.title = "! SavvyChat";
		alerted = false;
		//displayNote("Reconnect failed. Retrying in "+time+" seconds. [[Try now@@javascript:clearTimeout(refreshTimeout);refreshToken(1, true);]]");
		displayNote("Reconnect failed. [[Try now@@javascript:clearTimeout(refreshTimeout);refreshToken(1, true);]]");
		clearTimeout(refreshTimeout);
		clearTimeout(checkConnectionTimeout);
		//refreshTimeout = setTimeout("refreshToken("+Math.min(time*2,60)+", true);",time*1000);
		return;
	}
	sendMessage('/token',{t:tokenid},callback,abort);
}

//when the channel connection fails
function onClose(){
	if(suppressErrors) return;
	clearTimeout(expectPingTimeout);
	for(var post in expectedPosts){
		clearTimeout(expectedPosts[post].timeout)
	}
	clearTimeout(checkConnectionTimeout);
	if(connectionError || authError) return;
	displayNote("Communication channel closed. SavvyChat is attempting to refresh your connection. If this doesn't work, please [[reload the page@@javascript:closeMessage();location.reload();]].");
	refreshToken(1);
}

var suppressChannelFail = false;
function channelFail(){
	if(suppressChannelFail) return;
	if(connectionError || authError) return;
	displayNote("SavvyChat's communication channel seems slow, flaky or broken. Maybe you want to [[refresh the channel connection@@javascript:onClose();]] or [[reload the page@@javascript:closeMessage();location.reload();]]. Click [[here@@javascript:suppressChannelFail=true;]] to make these warnings stop happening.");
	clearTimeout(checkConnectionTimeout)
	checkConnectionTimeout = setTimeout("heartbeat();",connectionCheckInterval);
}

var suppressAjaxFail = false;
function ajaxFail(request){
	if(suppressAjaxFail) return;
	if(inRefreshSequence) return;
	if(connectionError || authError) return;
	var requestText = '';
	if(request) requestText = ' (`'+request+'`)';
	displayNote("Some request"+requestText+" failed or timed out. Maybe you want to [[refresh the channel connection@@javascript:onClose();]] or [[reload the page@@javascript:closeMessage();location.reload();]]. Click [[here@@javascript:suppressAjaxFail=true;]] to make these warnings stop happening.");
	onClose();
}

var noteLog = [];
function displayNote(post, skipLog){
	if(post.constructor == String)
		post = {content:post, author:"SavvyChat", date:new Date(), recipients:[]};
	if(!skipLog) noteLog.push(post);
	receivePost(post,false,true);
}

var sounds = {};
function playAlert(type){
	//play sound
	if(typeof(Audio) == 'undefined'){
		//this only works in IE
		document.all.IEsound.src = "sounds/"+type+".wav";
	}else{
		//HTML5 version
		sounds[type].play();
		sounds[type] = new Audio("sounds/"+type+".wav");
	}
}

//helper function for setIcon
function newIconLink(path,id,rel){
	var head = document.getElementsByTagName("head")[0];
	head.removeChild(document.getElementById(id));
	
	var newIcon = document.createElement("link");
	newIcon.rel = rel;
	newIcon.id = id;
	newIcon.type = "image/x-icon";
	newIcon.href = "icons/" + path;
	head.appendChild(newIcon);
}

//http://softwareas.com/dynamic-favicons
//set the favicon (as an alert)
function setIcon(path){
	//first, check browser is not IE8 or older, where this is not possible
	//http://obvcode.blogspot.com/2007/11/easiest-way-to-check-ie-version-with.html
	var version = 999; // we assume a sane browser
    if (navigator.appVersion.indexOf("MSIE") != -1)
		// bah, IE again, lets downgrade version number
		version = parseFloat(navigator.appVersion.split("MSIE")[1]);
	if(version<9){
		return;
	}
		
	newIconLink(path,"icon","icon");
	newIconLink(path,"sicon","shortcut icon");
	
	//some browsers require the page content to change before updating the favicon.
	var shim = document.createElement('iframe');
	shim.width = shim.height = 0;
	document.body.appendChild(shim);
	shim.src = "http://a";
	document.body.removeChild(shim);
}

//http://stackoverflow.com/questions/2790001/fixing-javascript-array-functions-in-internet-explorer-indexof-foreach-etc
if (!('indexOf' in Array.prototype)) {
    Array.prototype.indexOf= function(find, i /*opt*/) {
        if (i===undefined) i= 0;
        if (i<0) i+= this.length;
        if (i<0) i= 0;
        for (var n= this.length; i<n; i++)
            if (i in this && this[i]===find)
                return i;
        return -1;
    };
}

function gotCalled(post){
	if(post.recipients&&post.recipients.length!=0){
		if(post.recipients.indexOf(username.toLowerCase())!=-1){
			return true;
		}
	}
	return false;
}

var alerted = false;
//on recieving any message from the server
var receivedPostIDs = [];

function onMessage(message){

	//every 5 minutes we should try a ping
	clearTimeout(checkConnectionTimeout);
	checkConnectionTimeout = setTimeout("heartbeat();",connectionCheckInterval);
	
	var m = $.parseJSON(message.data);

	if(m.content){
		if(syncing){
			syncInterrupt = true;
			return;
		}
		//this was a post
		receivePost(m);
		//play a special tone when someone calls you
		if(gotCalled(m)){
			sendMessage("/callack",{"id":m.id}); //call acknowledgement
			if(!windowFocus&&!mute){
				playAlert("call");
			}
		}
		
		if(!windowFocus&&!alerted){
			setIcon("alert.ico");
			document.title="* SavvyChat";
			if(playTone&&!gotCalled(m)&&!mute){
				playAlert("alert");
			}
			alerted = true;
		}

		receivedPostIDs.push(m.id);

		for(var post in expectedPosts){
			var postObj = expectedPosts[post]
			if(postObj.id == m.id) {
				clearTimeout(postObj.timeout);
				delete postObj;
				break;
			}
		}
	}

	if(m.ping){
		clearTimeout(expectPingTimeout);
		pingChannelTime = (new Date()).getTime();
		if(pingAjaxTime != -1) reportPing();
	}
	if(m.heartbeat)
		clearTimeout(expectHeartbeatTimeout);
}

function reportPing(){
	var channelLatency = pingChannelTime - pingStartTime;
	var ajaxLatency = pingAjaxTime - pingStartTime;
	avgChannelLatency = (avgChannelLatency*numLatencies+channelLatency)/(numLatencies+1);
	avgAjaxLatency = (avgAjaxLatency*numLatencies+ajaxLatency)/(numLatencies+1);
	numLatencies++;
	var note = "Ping successful.\nChannel response latency: " + channelLatency + " ms. (Avg "+Math.round(avgChannelLatency)+")."+
		"\nAJAX response latency: " + ajaxLatency + " ms. (Avg "+Math.round(avgAjaxLatency)+").";
	displayNote(note);
	pinging = false;
	showPreview(true);
}

var avgChannelLatency = 0
var avgAjaxLatency = 0
var numLatencies = 0;

function logout(){
	closeMessage();
	location.href="{{ logouturl }}";
}

var commands = [];
function newCommand(tag, preview, action){
	commands.push({tag:tag,preview:preview,action:action});
}

newCommand("logout",function(){return "log out";},logout);

newCommand("help",function(){return "show help";},openHelp);

newCommand("hf",function(){return verbose?"hide header and footer":"show header and footer as normal";},function(){
	verbose = !verbose;
	sendMessage('/options', {type:"hf",h:verbose});
	wh = 0;//force a refit
	fitWindow();
});

newCommand("shift",function(){return "change the send shortcut to "+(shiftSend?"ENTER":"SHIFT+ENTER");},function(){
	shiftSend = !shiftSend;
	updatePostText();
	sendMessage('/options', {type:"shiftsend",s:shiftSend});
});

newCommand("tone",function(){return (playTone?"disable":"enable")+" the alert tone";},function(){
	var checkbox = $("#alertcheck")[0];
	checkbox.checked = !checkbox.checked;
	toggleAlert(checkbox);
});

newCommand("mute",function(){return (mute?"unmute":"mute")+" all sounds";},function(){mute = !mute;});

newCommand("preview",function(){return (mathpreview?"disable":"enable")+" the preview";},function(){
	var checkbox = $("#previewcheck")[0];
	checkbox.checked = !checkbox.checked;
	togglePreview(checkbox);
});

newCommand("math",function(){return (dopreview?"disable":"enable")+" live previewing of math";},function(){mathpreview = !mathpreview;});

newCommand("sync",function(){return syncing?"!Syncing in progress, command disabled":"synchronize the discussion in case you failed to receive some messages";},function(){sync();});

newCommand("ping",function(){return pinging?"!Pinging in progress, command disabled":"check whether the channel is open";},function(){ping();});

//newCommand("refresh",function(){return refreshing?"!Refreshing in progress, command disabled":"request a new channel token to refresh the connection";},function(){refreshToken();});

newCommand("upload",function(){return "open upload dialog";},function(){showUpload();});

var backupText = "";
var showingLog = false;
//send a new post to the server
function sendPost(){
	text = document.getElementById("composefield").value.replace(/\r/g,"");

	if(text.substring(0,1)=='/'&&text.substring(0,2)!='//'){
		//deal with commands
		var tag = text.substring(1).split(/\s/)[0];
		for(var command in commands){
			if (commands[command].tag == tag){
				commands[command].action();
				return showPreview(true);
			}
		}
		return;
	}

	if(disableSend) return;

	var thisPost = {startTime:(new Date()).getTime(),text:document.getElementById("composefield").value}
	expectedPosts.push(thisPost);

	//if(text == "") return;
	var callback = function(response){
		//allowSend(true,"post");

		//maybe post has been received already
		var id = Number(response);
		checkIndex = receivedPostIDs.indexOf(id);
		if(checkIndex>-1){
			delete thisPost;
			return;
		}

		thisPost.id = id;
		thisPost.timeout = setTimeout("channelFail();",channelWaitLeniency);
	};

	var abort = function(){
		var note = 'Your post may have failed to send:\n\n`'+thisPost.text.replace(/`/g,"``")+"`";
		displayNote(note);
	};

	getHTMLfromSavvyCode(text,false,true); // get recipients
	sendMessage('/post', {p:text,r:recipients.join(",")}, callback, abort)

	document.getElementById("preview").innerHTML = "";
	//showPreview(true);
	document.getElementById("authorpreview").innerHTML = username + ":";
	backupText = document.getElementById("composefield").value;
	document.getElementById("composefield").value = "";
	//allowSend(false,"post");
	//receivePost({content:document.getElementById("composefield").value,author:username,date:"1/3/11, 13:30 EST"});
}

var expectedPosts = [];

var retrieving = false;
//call the server for some archive
function retrieveArchive(numPosts){
	if(retrieving||denyretrieve) return;
	if(!numPosts) numPosts = 20;
	var callback = function(response){
		var m = $.parseJSON(response);
		document.getElementById("viewarchivetag").innerHTML='<a href="" onclick="retrieveArchive();return false;">^ view older ^</a>'
		receiveArchive(m.posts);
		retrieving = false;
		showPreview(true);
		endquerycursor = m.cursor;
		if(!m.showarchive){
			document.getElementById("viewarchivetag").style.display = "None";
			denyretrieve = true;
		}
	};

	var abort = function(){
		document.getElementById("viewarchivetag").innerHTML='<a href="" onclick="retrieveArchive();return false;">^ Retrieval failed! Try again? ^</a>'
		retrieving = false;
		showPreview(true);
	};

	retrieving = true;
	showPreview(true);
	sendMessage('/retrieve', {n:numPosts,c:endquerycursor}, callback, abort);
	document.getElementById("viewarchivetag").innerHTML = "loading...";
	//using AJAX for the reply seems marginally more reliable than COMET, but I'm not certain. Original COMET code is commented out in onMessage.
}

var syncInterrupt = false;
var syncing = false
//sync messages that may have not been received in COMET
function sync(){
	if(syncing) return;
	var callback = function(response){
		var m = $.parseJSON(response);
		startquerycursor = m.cursor;
		receiveSync(m.posts);
		syncing = false;
		showPreview(true);
		if(syncInterrupt){
			sync();
		}
	};
	sendMessage('/sync', {c:startquerycursor}, callback,function(){syncing=false;});
	syncing = true;
	showPreview(true)
	syncInterrupt = false;
}

var expectPingTimeout = null;
var pingAjaxTime=-1;
var pingChannelTime=-1;
var pinging = false;
var pingStartTime;
function ping(){
	if(pinging) return;
	pinging = true;
	showPreview(true);

	//send ping, receive confirmation. Time it
	var callback = function(response){
		pingAjaxTime = (new Date()).getTime();
		if(pingChannelTime != -1) reportPing();
		else expectPingTimeout = setTimeout("pinging=false;pingAjaxTime=-1;channelFail();",channelWaitLeniency);
	};
	var abort = function(response){
		pinging = false;
	};
	sendMessage('/ping', {t:tokenid}, callback, abort);
	pingStartTime = (new Date()).getTime();
	pingAjaxTime = -1;
	pingChannelTime = -1;
}

var expectHeartbeatTimeout = null;
function heartbeat(){
	sendMessage('/heartbeat', {t:tokenid,test:false});
	clearTimeout(expectHeartbeatTimeout);
	expectHeartbeatTimeout = setTimeout("channelFail();",channelWaitLeniency);
}

//process the archive
function receiveArchive(posts){
	//insert new posts
	//var postlist=document.getElementById("archivelist");
	//var interdiv=postlist.firstChild;
	for(var i=0;i<posts.length;i++){
		receivePost(posts[i],true);
	}
	//if (interdiv.previousSibling.childNodes[1].innerHTML==interdiv.childNodes[1].innerHTML){
		//interdiv.childNodes[1].style.display="None";
	//}
}

//process the sync
function receiveSync(posts){
	//first, remove all unsynced posts
	var postlist = document.getElementById("archivelist");
	for (var postidx = postlist.childNodes.length - 1;postidx >= 0;postidx --){
		var post = postlist.childNodes[postidx];
		if(post.className && !hasClass(post,"synced")){
			postlist.removeChild(post);
		}
	}
	//insert new posts
	//var interdiv = postlist.firstChild
	for(var i=posts.length-1;i>=0;i--){
		receivePost(posts[i]);
	}
	//if (interdiv.previousSibling.childNodes[1].innerHTML==interdiv.childNodes[1].innerHTML){
		//interdiv.childNodes[1].style.display="None";
	//}
}

//show/hide upload dialog
//var uploading = false;
function loadiFrame(){}
function hideUpload(){
	//alert(document.getElementById("uploadinput").value);
	//uploading = false;
	allowSend(true,"upload");
	document.getElementById("uploadform").style.display = "none";
	//document.getElementById("composefield").value = cachedText;
	cachedText = document.getElementById("composefield").style.visibility = "visible";//disabled = false;
	document.getElementById("composefield").focus();
}
function showUpload(){
	//uploading = true;
	allowSend(false,"upload");
	//cachedText = document.getElementById("composefield").value;
	//document.getElementById("composefield").value = "";
	document.getElementById("composefield").style.visibility = "hidden";//disabled = true;
	document.getElementById("uploadform").style.display = "block";
	document.getElementById("uploadinput").focus();
}

//check there's a file selected
function validateFile(){
	element = document.getElementById("uploadinput");
	if(element.value == ""){
		document.getElementById("uploadbutton").disabled = true;
	}else{
		document.getElementById("uploadbutton").disabled = false;
	}
}

//helper function since we require to hash the 3 different escaping tags in both autoquote() and getHTMLfromSavvyCode()
function hashstuff(text,codehash,mathhash,linkhashname,linkhashurl){
	var worktext = text.replace(/``/g,"$\r$").replace(/`/g,"``").replace(/\$\r\$/g,"\r`\r");//double backtick escapes
	var output = "";
	while(1){
		//get the first occurrence of an escape tag, hash that away and keep going
		var codeparts = worktext.split("``");
		var mathparts = worktext.split("$$");
		var linkparts = worktext.split("[[");
		
		if(codeparts[0].length == mathparts[0].length && codeparts[0].length == linkparts[0].length){
		//we are done
			output += worktext;
			break;
		}
		
		var firstIndex = Math.min(codeparts[0].length, mathparts[0].length, linkparts[0].length);
		if(codeparts[0].length == firstIndex){
			output += codeparts.shift()+"``";
			//the carriage return is stripped later so we can use it to ensure tags aren't misinterpreted when decoding
			codehash.push(codeparts.shift().replace(/\$\$/g,"$\r$\r").replace(/\[\[/g,"[\r[\r").replace(/\r\r\r/g,"\r`\r"));
			worktext = codeparts.join("``");
		}else if(linkparts[0].length == firstIndex){
			output += linkparts.shift()+"[[";
			var remainder = linkparts.join("[[");
			linkparts = remainder.split("]]");
			//the carriage return is stripped later so we can use it to ensure tags aren't misinterpreted when decoding
			//we split the link into its label and URL and if no label is defined, give it the URL as the label
			linkdata = linkparts.shift().replace(/\$\$/g,"$\r$\r").replace(/\[\[/g,"[\r[\r").split("@@");
			if(linkdata.length == 1){
				if(linkdata[0]=="img") linkdata[0] = "~I";
				linkdata.unshift(linkdata[0]);
			}
			linkdata[1] = addHTTPtoURL(linkdata[1]);
			linkhashurl.push(linkdata[1].replace(/\s/g,""));
			linkhashname.push(linkdata[0]);
			worktext = linkparts.join("]]");
		}else if(mathparts[0].length == firstIndex){
			output += mathparts.shift()+"$$";
			mathhash.push(mathparts.shift().replace(/\n/g," "));
			worktext = mathparts.join("$$");
		}
	}
	return output.replace(/\r`\r/g,"`////");
}

function formatQuote(content){
	var worktext = content.replace(/^\|\|[\s\S]*?\|\|/,"").replace(/\r/g,"");
	
	//find something formatted like a link
	worktext = "\r" + worktext + "\r";
	worktext = worktext.replace(/(\s(&gt;)*)((ht|f)tp(s?)\:\/\/[\S]*)(\s)/g,"$1[[$3]]$6");
	worktext = worktext.replace(/(\s(&gt;)*)((ht|f)tp(s?)\:\/\/[\S]*)(\s)/g,"$1[[$3]]$6");
	//(two passes to remove adjacent links)
	
	//hash code and math
	var codehash = [];
	var mathhash = [];
	var linkhashname = [];
	var linkhashurl = [];
	
	var output = hashstuff(worktext,codehash,mathhash,linkhashname,linkhashurl)

	//put back escaped backticks
	output = output.replace(/`\/\/\/\//g,"`\r`\r");
	//add quote tags
	output = ">" + output.replace(/\n/g,"\n>");
	
	//close open formatting tags
	output = output.replace(/\*\*([\s\S]*?)$/,'**$1**');
	output = output.replace(/\/\/([\s\S]*?)$/,'//$1//')
	output = output.replace(/__([\s\S]*?)$/,'__$1__');
	
	//put back code
	codeparts = output.split("``");
	output = interleave(codeparts,codehash,'`','`','`','`');
	//put back text part of links
	linkparts = output.split("[[");
	output = interleave(linkparts,linkhashname,'\r[\r[\r','@@[[]]','\r[\r[\r','@@[[]]');
	//put back links
	linkparts = output.split("[[");
	output = interleave(linkparts,linkhashurl,'','','','');	
	
	//simplify link format
	output = output.replace(/\[\r\[\r(.*?)@@\1\]\]/g,"[[$1]]");
	
	//put back math
	mathparts = output.split("$$");
	output = interleave(mathparts, mathhash,'$$','$$','$$',' $$');
	var textarea = document.getElementById("composefield");
	return output.replace(/\r/g,'');
}

//append the textbox with a quote of another post
function autoquote(content,author,date){
	output = ">**" + author + " @ " + date + ":**\n" + formatQuote(content);
	
	var textarea = document.getElementById("composefield");
	var textvalue = textarea.value.replace(/\r\n/g,"\n");
	var selection = getSelectionPos(textarea);
	var pretext = textvalue.substr(0,selection.startPos)
	var posttext = textvalue.substr(selection.endPos)
	if(pretext.length != 0 && pretext.charAt(pretext.length-1) != "\n") pretext += "\n";
	if(posttext.length != 0 && posttext.charAt(0) != "\n") posttext = "\n" + posttext;
	textarea.value = pretext + output + posttext;
	setSelectionPos(textarea, pretext.length, pretext.length + output.length);
	/*if(textarea.value.replace(/\s/g,"") == ""){
		textarea.value = output;
	}else{
		textarea.value += "\n" + output;
	}*/
	showPreview();
}

//shorthand function because this gets used a lot. Queues a function for after math is finished typesetting.
function MJQ(arr){
	if(!disableMath) MathJax.Hub.Queue(arr);
}

//shorthand function to typeset math in an element
function MJQT(id){
	if(!disableMath) MathJax.Hub.Queue(["Typeset",MathJax.Hub,id]);
}

//process post and add to list
function receivePost(post,prepend,notification){
	var cachedmathpreview = mathpreview;
	var messageHtml = getHTMLfromSavvyCode(post.content,true);
	var postdate;
	if(post.date.constructor == Date){
		postdate = post.date;
	}else if(post.date == ""){
		postdate = new Date();
	}else{
		postdate = new Date(parseFloat(post.date)*1000);
	}
	var parsedDate = formatDate(postdate);
	var classtext = notification||post.id=="dontSave"?" notifypost":"";
	if(gotCalled(post)&&post.author.toLowerCase()!=username.toLowerCase()){
		classtext = ' callpost';
	}
	var quoteHTML = '<a>'+parsedDate+'</a>';
	var titleHTML = "";
	//if(gadget) titleHTML = ' title="'+parsedDate+'"';

	var authortext = post.author+": "
	if(post.recipients.length>0){
		authortext = post.author+" to "+makeRecipientsText(post.recipients)+": ";
	}

	var divHTML='<div class="datelabel">'+quoteHTML+' </div><span class="author">'+authortext+'</span><span class="postcontent">' + messageHtml + '</span>';
	var newdiv = document.createElement('div');
	newdiv.innerHTML = divHTML;
	if(gadget) newdiv.title = parsedDate
	newdiv.firstChild.firstChild.href = "";
	newdiv.firstChild.firstChild.title = "quote this post";
	newdiv.firstChild.firstChild.onclick = function(){
		autoquote(post.content,post.author,parsedDate);
		return false;
	}
	newdiv.id = 'post' + currPostID;
	newdiv.className = "post" + classtext;
	if(syncing || !socket || retrieving){
		//AJAX not comet, flag that
		addClass(newdiv,"synced")
	}
	var postlist = document.getElementById("archivelist");
	if(!prepend){
		//append
		//hide author label for repeated posts by the same author
		if(postlist.lastChild){
			if(messageHtml != ""){
				if(postlist.lastChild.childNodes[1].innerHTML == authortext){
					newdiv.childNodes[1].style.display = "None";
					addClass(newdiv,"joinedattop");
					addClass(postlist.lastChild,"joinedatbottom");
					//newdiv.style.marginTop = "0";
					//newdiv.style.paddingTop = "0";
					//postlist.lastChild.style.paddingBottom = "0";
					//postlist.lastChild.innerHTML += "<hr SLASH>";
				}
			}
		}
		postlist.appendChild(newdiv);
	}else{
		//prepend
		//hide author label for repeated posts by the same author
		if(postlist.firstChild){
			if(messageHtml != ""){
				if(postlist.firstChild.childNodes[1].innerHTML == authortext){
					postlist.firstChild.childNodes[1].style.display = "None";
					addClass(newdiv,"joinedatbottom");
					addClass(postlist.firstChild,"joinedattop");
					//postlist.firstChild.style.marginTop = "0";
					//postlist.firstChild.style.paddingTop = "0";
					//newdiv.style.paddingBottom = "0";
					//newdiv.innerHTML += "<hr SLASH>";
				}
			}
		}
		postlist.insertBefore(newdiv,postlist.firstChild)
	}
	MJQT("post"+currPostID);
	scrollDown();
	MJQ([scrollDown]);
	currPostID++;
}

//http://www.electrictoolbox.com/pad-number-zeroes-javascript/
function pad(number, length) {
    var str = '' + number;
    while (str.length < length) {
        str = '0' + str;
    }   
    return str;
}

function formatDate(d){
	var h=pad(d.getHours(),2);
	var m=pad(d.getMinutes(),2);
	var Y=pad(d.getFullYear(),4);
	var M=pad(d.getMonth()+1,2);
	var D=pad(d.getDate(),2);
	return Y+"-"+M+"-"+D+", "+h+":"+m;
}

var helpWindow;
function openHelp(){
	if(helpWindow==null||helpWindow.closed){
		helpWindow=window.open('help','','menubar=no,toolbar=no,location=no,status=no,scrollbars=yes,resizable=yes,height=600,width=600');
	}else{
		helpWindow.location='help';
	}
	helpWindow.focus();
	return false;
}

//update the content of the preview post
var cachedText = "";
var MJTypesettingPreview = false;
function showPreview(ignoreCache){
	if(MJTypesettingPreview){
		//MJQ([showPreview]);
		setTimeout("showPreview();",500); //safer than MJQ which could potentially lock up
		return;
	}
	var composetext = document.getElementById("composefield").value;
	if(composetext == ""){
		allowSend(false,"empty");
	}else{
		allowSend(true,"empty");
	}
	//if(uploading) return;
	if(!ignoreCache && cachedText == composetext) return;
	cachedText = composetext;
	if(!dopreview){
		return;
	}
	
	var previewQuoteDisplay = [];
	//note which spoilers are open
	var quotes = document.getElementById("preview").getElementsByTagName("blockquote")
	for(var quote in quotes){
		if(quotes[quote].className == "spoiler"){
			previewQuoteDisplay.push(quotes[quote].childNodes[1].style.display == "block");
		}
	}

	var authortext = username+": "
	var messageHTML = ""

	if(composetext.substring(0,1)=='/'&&composetext.substring(0,2)!='//'){
		//deal with commands
		var tag = composetext.substring(1).split(/\s/)[0];
		var text = "";
		for(var command in commands){
			if (commands[command].tag == tag){
				text = commands[command].preview();
				if(text.substring(0,1) == '!')
					text = text.substring(1)
				else
					text = "Special command to "+text+" (will not send)";
			}
		}

		if(text == ""){
			if(tag == ""){
				text = "prepended <span class=\"code\">/</span> is for commands. See <a href=\"javascript:openHelp();\">help</a>."
			}else{
				text = "unknown command <span class=\"code\">"+tag+"</span>."
			}
			allowSend(false,"unknowntag");
		}else{
			allowSend(true,"unknowntag");
		}
		messageHTML = "<strong>"+text+"</strong>";
	} else {
		//proper message
		allowSend(true,"unknowntag");
		messageHTML = getHTMLfromSavvyCode(composetext, mathpreview, true);
		if(recipients.length > 0){
			authortext = username+" to "+makeRecipientsText(recipients)+": ";
		}
	}

	document.getElementById("preview").innerHTML = messageHTML;
	document.getElementById("authorpreview").innerHTML = authortext;

	//restore mode of spoilers
	var quotes = document.getElementById("preview").getElementsByTagName("blockquote")
	for(var quote in quotes){
		if(quotes[quote].className == "spoiler"){
			quotes[quote].childNodes[1].style.display = previewQuoteDisplay.shift() ? "block" : "none";
		}
	}

	if(mathpreview){
		MJTypesettingPreview = true;
		MJQT("preview");
		MJQ([new function(){MJTypesettingPreview=false;}]);
	}
	scrollDown();
	MJQ([scrollDown]);
}

var recipients = [];
function makeRecipientsText(recipients){
	return recipients.join(", ").replace(/\w[^, ]*/g,function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();});
}

function addHTTPtoURL(URL){
	if(!/^(ht|f)tp(s?)\:\/\/|^javascript:/.test(URL)){
		return "http://"+URL;
	}
	return URL;
}

//turn my formatting syntax into HTML for display
function getHTMLfromSavvyCode(savvyCode, domath, handleRecipients){
	if(handleRecipients) recipients = []

	if(disableMath){
		domath = false;
	}
	//escape stuff. ~ is my escape character.
	var worktext = savvyCode
		.replace(/\r\n/g,"\n")
		.replace(/\r/g,"")
		.replace(/&/g,"&amp;")
		.replace(/</g,"&lt;")
		.replace(/\>/g,"&gt;")
		.replace(/"/g,"&quot;")
		.replace(/\\\(/g,"\\<a></a>(").replace(/~/g,"~T");
	
	var multiline = true; //no longer necessary

	if(worktext == "") worktext = " ";
	
	//hash code and math so we can do formatting on the rest
	var codehash = [];
	var mathhash = [];
	var linkhashname = [];
	var linkhashurl = [];
	var output = hashstuff(worktext,codehash,mathhash,linkhashname,linkhashurl)

	//http://daringfireball.net/2010/07/improved_regex_for_matching_urls
	var urlRegEx = /\b((?:https?:\/\/|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}\/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'".,<>?«»“”‘’]))/ig;
	var softLinkNameHash = [];
	var softLinkHash = [];
	output = output.replace(urlRegEx, function(){
		URL = RegExp.$1;
		softLinkHash.push(addHTTPtoURL(URL));
		softLinkNameHash.push(URL);
		return "~S";
	});
	
	if(handleRecipients){
		output = output.replace(/@(\w+)/ig, function(string) {
			var user = string.substr(1).toLowerCase();
			var highlight = false;
			for(var alias in aliases){
				if(aliases[alias].aliastext == user){
					recipients = $().union(recipients,aliases[alias].meaning.split(","));
					highlight = true;
					break;
				}
			}
			if(highlight) return '<span class="user">'+string+"</span>";
			return string;
		});
	}

	//do formatting
	var btags = '<strong>$1</strong>';
	var itags = '<em>$1</em>';
	var stags = '<span class="strikethrough">$1</span>';

	output = output.replace(/\*\*([\s\S]*?)\*\*/g,btags).replace(/\*\*([\s\S]*?)$/,btags);
	output = output.replace(/\/\/([\s\S]*?)\/\//g,itags).replace(/\/\/([\s\S]*?)$/,itags)
	output = output.replace(/__([\s\S]*?)__/g,stags).replace(/__([\s\S]*?)$/,stags);
	
	
	if(multiline){
		//add quotes
		output = "\r" + output + "\r";
		output = output.replace(/([\r\n]&gt;.*?)+[\r\n]/g,function(savvyCode){return addQuotes(savvyCode);});
		
		//add dot points
		output = "\r" + output + "\r";
		output = output.replace(/([\r\n]- .*?)+[\r\n]/g,function(savvyCode){return addDotPoints(savvyCode);});
	}
	
	var citags = ['<span class="code tex2jax_ignore">','</span>'];
	var cbtags = ['<pre class="code tex2jax_ignore">','</pre>'];
	var atags = ['~A1','~A2'];
	var softatags = ['<a target="_blank" href="~S">','</a>'];
	var mitags = ['<span class="mathplaceholderinline">','</span>'];
	var mbtags = ['<div class="mathplaceholderblock">','</div>'];
	if(domath){
		mitags = ['\\(','\\)'];
		mbtags = ['$$',' $$'];
	}

	//put back soft links
	linkparts = output.split("~S");
	output = interleave(linkparts,softLinkNameHash,softatags[0],softatags[1],softatags[0],softatags[1]);
	linkparts = output.split("~S");
	output = interleave(linkparts,softLinkHash,"","","","");
	
	//put back code
	if(multiline) output = "\r" + output + "\r";
	codeparts = output.split("``");
	output = interleave(codeparts,codehash,citags[0],citags[1],cbtags[0],cbtags[1]);

	//put back links
	linkparts = output.split("[[");
	output = interleave(linkparts,linkhashname,atags[0],atags[1],atags[0],atags[1]);
	var imgonload = "setTimeout(&quot;scrollDown();&quot;,1);"
	output = output
		.replace(/^(\r*)~A1img~A2/,'\n$1~A1img~A2')
		.replace(/~A1img~A2/g,'<a target="_blank" href="~U"><img onerror="'+imgonload+'" onload="'+imgonload+'" src="[[" /'+'></a>')
		.replace(/~A1(.*)~A2/g,'<a target="_blank" href="[[">$1</a>');
	linkparts = output.split("[[");
	output = interleave(linkparts,linkhashurl,atags[0],atags[1],atags[0],atags[1])
		.replace(/~I/g,"img")
		.replace(/~U(.*)~A1(.*)~A2/g,"$2$1$2")
		.replace(/~A1|~A2/g,"");
	
	//put back math
	if(multiline) output = "\r" + output + "\r";
	mathparts = output.split("$$");
	output = interleave(mathparts, mathhash,mitags[0],mitags[1],mbtags[0],mbtags[1]);

	output = output.replace(/\r/g,'');
	//order escaped backticks
	while(output.indexOf('`<em></em><span class="code') >= 0){
		output = output.replace(/`<em><\/em><span class="code(.+?)>/g,'<span class="code$1>`');
	}
	return output.replace(/~T/g,"~");
}

//recursive helper function that uses an undocumented feature of replace() to parse nested ">" quote tags
function addQuotes(savvyCode){
	var content = savvyCode.replace(/([\n\r])&gt;/g,"$1")/*.replace(/^\n|\n$/g,'')*/.replace(/([\r\n]&gt;.*?)+[\r\n]/g,function(savvyCode){return addQuotes(savvyCode);})+"\r";
	if(content.replace(/\r/g,"") == ""){
		content = "<br /"+">";
	}
	//is this a spoiler
	if(/^[\r\n]*&lt; *.*?[\n\r]/.test(content)){
		content = content.replace(/^[\r\n]*&lt; *(.*?)[\n\r]/,"\r")
		//this is a spoiler

		return '\r<blockquote class="spoiler"><a onclick="if(this.nextSibling.style.display==&quot;none&quot;){this.nextSibling.style.display=&quot;block&quot;;scrollDown();}else{this.nextSibling.style.display=&quot;none&quot;}return false;" href="">Show/Hide <span class="collapsetitle">' + RegExp.$1 + '</span></a><div style="display:none;">' + content + '</div></blockquote>\r';
	}
	var openingnewline = ""
	if(content.substr(0,1)=="\n"){
		content = content.substr(1)
		openingnewline = "\n"
	}
	return openingnewline+'\r<blockquote>\r' + content + '\r</blockquote>\r';
}

function addDotPoints(savvyCode){
	return "<ul>" + savvyCode.replace(/[\r\n]/g,"\r\r").replace(/\r- (.*?)\r/g,"<li>$1</li>") + "</ul>"
}

//helper function that puts a hash back into the text
//has is tagged according to whether the code/math is isolated in a paragraph
function interleave(parts, hash, startSepLine, endSepLine, startSepBlock, endSepBlock){

	var progress = "";
	while(hash.length > 0){
		progress += parts.shift();
		if(/[\r\n]/.test(progress.charAt(progress.length-1)) && /[\r\n]/.test(parts[0].charAt(0))){
			progress += startSepBlock+hash.shift() + endSepBlock;
		}else{
			progress += startSepLine+hash.shift() + endSepLine;
		}
	}
	progress += parts[0];
	return progress;
}

//stop a keypress event from performing its default action
function stopBubble(e){
	//e.cancelBubble is supported by IE - this will kill the bubbling process.
	e.cancelBubble = true;
	e.returnValue = false;

	//e.stopPropagation works in Firefox.
	if (e.stopPropagation) {
		e.stopPropagation();
		e.preventDefault();
	}
	return false;
}

//check for keyboard shortcuts
function checkKeys(e){
	var code
	if (e.keyCode) code = e.keyCode;
	else code = e.which;
	var character = String.fromCharCode(code).toLowerCase();
	//if(code == 38 && upKeyOK)
	if((!e.shiftKey ^ shiftSend) && code == 13){
		sendPost();
		return stopBubble(e);
	}
	if(e.ctrlKey && character == 'i'){
		//italics
		insertAroundCursor(document.getElementById('composefield'), "//");
		return stopBubble(e);
	}
	if(e.ctrlKey && character == 'b'){
		//bold
		insertAroundCursor(document.getElementById('composefield'), "**");
		return stopBubble(e);
	}
	if(e.ctrlKey && character == 'q'){
		//quote
		quoteSelection(document.getElementById('composefield'))
		//insertAroundCursor(document.getElementById('composefield'), "**");
		return stopBubble(e);
	}
	return true;
}

function getSelectionPos(textarea){
	var output = {startPos:0, endPos:0};
	//IE support
	//figuring out the cursor position is stupid in IE
	if (document.selection) {
		textarea.focus();
		var sel = document.selection.createRange();
		var oldvalue = textarea.value.replace(/\r\n/g,"\n");
		var emptyflag = false
		if(sel.text == ""){
			emptyflag = true
			sel.text = String.fromCharCode(123456);//i hope nobody actually types this in
		}else{
			//cache text then modify it so I can search for its position
			if(sel.text.length == 1){
				sel.text = String.fromCharCode(sel.text.charCodeAt(0) + 1);
			}
			sel.text = String.fromCharCode(sel.text.charCodeAt(0) + 1)
			+ sel.text.substring(1, sel.text.length - 1)
			+ String.fromCharCode(sel.text.charCodeAt(sel.text.length - 1) + 1);
		}
		var newvalue = textarea.value.replace(/\r\n/g,"\n");
		for(var i = 0;i < oldvalue.length;i++){
			if(oldvalue.charAt(i) != newvalue.charAt(i)){
				output.startPos = i;
				break;
			}
		}
		if(emptyflag){
			output.endPos = output.startPos
		}else{
			for(i = oldvalue.length-1;i >= 0;i--){
				if(oldvalue.charAt(i) != newvalue.charAt(i)){
					output.endPos = i + 1;
					break;
				}
			}
		}
		textarea.value = oldvalue;
	}
	//MOZILLA/NETSCAPE support
	else if (textarea.selectionStart || textarea.selectionStart == '0') {
		output.startPos = textarea.selectionStart;
		output.endPos = textarea.selectionEnd;
	}
	return output;
}

function setSelectionPos(textarea, startPos, endPos){
	if(!endPos){
		endPos = startPos;
	}
	//IE support
	if (textarea.createTextRange) {
		textarea.focus();
		var sel = textarea.createTextRange()
		//sel.moveStart('character', -textarea.value.length);
		//sel.moveEnd('character', -textarea.value.length);
		//sel.moveStart('character', startPos);
		//sel.moveEnd('character', endPos);
		sel.move("character",startPos);
		sel.moveEnd('character', endPos - startPos);
		sel.select()
	}
	//MOZILLA/NETSCAPE support
	else if (textarea.selectionStart || textarea.selectionStart == '0') {
		textarea.selectionStart = startPos;
		textarea.selectionEnd = endPos;
	}
}

function quoteSelection(textarea){
	var selection = getSelectionPos(textarea);
	textvalue = textarea.value.replace(/\r\n/g,"\n");
	var pretext = textvalue.substring(0, selection.startPos);
	if(pretext.length > 0 && pretext.charAt(pretext.length-1) != "\n") pretext += "\n";
	var posttext = textvalue.substring(selection.endPos, textvalue.length);
	if(posttext.length > 0 && posttext.charAt(0) != "\n") posttext = "\n" + posttext;
	var quotetext = formatQuote(textvalue.substring(selection.startPos, selection.endPos))
	textarea.value = pretext + quotetext + posttext;
	if(selection.startPos == selection.endPos) setSelectionPos(textarea, pretext.length + 1);
	else setSelectionPos(textarea, pretext.length, pretext.length + quotetext.length);
}

//put bold and italics tags around the cursor
//http://alexking.org/blog/2003/06/02/inserting-at-the-cursor-using-javascript
function insertAroundCursor(textarea, tag) {
	//IE support
	if (document.selection) {
		textarea.focus();
		var sel = document.selection.createRange();
		if(sel.text == ""){
			sel.text = tag;
		}else{
			sel.text = tag + sel.text + tag;
		}
	}
	//MOZILLA/NETSCAPE support
	else if (textarea.selectionStart || textarea.selectionStart == '0') {
		var startPos = textarea.selectionStart;
		var endPos = textarea.selectionEnd;
		if(startPos == endPos){
			textarea.value = textarea.value.substring(0, startPos) + tag + textarea.value.substring(endPos, textarea.value.length);
			setSelectionPos(textarea, startPos + tag.length)
		}else{
			textarea.value = textarea.value.substring(0, startPos) + tag
			+ textarea.value.substring(startPos, endPos) + tag
			+ textarea.value.substring(endPos, textarea.value.length);
			setSelectionPos(textarea, startPos, endPos + tag.length * 2);
		}
	}
}

var scrollLocked = true;
var autoscrolling = false;
function scrolledDown(){
	var posts = document.getElementById("postlist");
	//seems theres occasionally some kind of rounding error
	return Math.abs(posts.scrollTop - (posts.scrollHeight - posts.offsetHeight))<2;
}

//if user set the scroll to the bottom of the postlist, scroll down automatically
function scrollDown(){
	var posts = document.getElementById("postlist");
	if(posts.clientHeight < posts.scrollHeight){
		//scrollbar
		addClass(posts,"withscrollbar");
	}else{
		removeClass(posts,"withscrollbar");
	}
	if(scrollLocked){
		autoscrolling = true;//flag so that onscroll doesn't get called again
		posts.scrollTop = posts.scrollHeight - posts.offsetHeight;
		autoscrolling = false;
	}
}

function setScrollLock(){
	if(!autoscrolling){
		scrollLocked = scrolledDown();
		//document.getElementById('topic').innerHTML=(new Date).getSeconds();
	}
}

//called when the preview option box is checked
function togglePreview(checkbox){
	if(checkbox.checked){
		dopreview = true;
	}else{
		dopreview = false;
	}
	document.getElementById("previewpost").style.display = dopreview?"Block":"None";
	showPreview();
	scrollDown();
	MJQ([scrollDown]);
}

//called when the tone alert option box is checked
function toggleAlert(checkbox){
	playTone = checkbox.checked;
	sendMessage('/options', {type:"tone",a:playTone});
}

function updatePostText(){
	document.getElementById('postbutton').value = shiftSend ? "Post (Shift+Enter)" : "Post (Enter)";
}

var ww = 0;
var wh = 0;
//called onresize fits page content intelligently
//width and height are handled separately
function fitWindow(){
	var widthchanged = false;
	if(ww != windowWidth()){
		widthchanged = true;
		ww = windowWidth();
		if(ww >= 900){
			document.getElementById('content').style.width = "900px";
			document.getElementById('postwrapper').style.width = "880px";
			document.getElementById('composefield').style.width = "880px";
			document.getElementById('content').style.borderWidth = Math.min(Math.round((ww - 900)/2), 3) + "px";
		}else{
			var padding = 20-20*gadget;
			document.getElementById('postwrapper').style.width = ww - padding + "px";
			document.getElementById('composefield').style.width = ww - padding + "px";
			document.getElementById('content').style.borderWidth = "0px";
			document.getElementById('content').style.width = ww + "px";
			if(ww < 400){
				document.getElementById('postbutton').value = "Post";
				document.getElementById('postbutton').style.width = "60px";
				document.getElementById('previewchecklabel').innerHTML = "preview";
				document.getElementById('alertchecklabel').innerHTML = "tone";
				if(gadget){
					document.getElementById('alertchecklabel').innerHTML = "&#x266B;";
				}
			}else{
				updatePostText();
				document.getElementById('postbutton').style.width = "150px";
				document.getElementById('previewchecklabel').innerHTML = "live preview&nbsp;&nbsp;";
				document.getElementById('alertchecklabel').innerHTML = "play alert tone";
			}
		}
	}
	if(widthchanged || wh != windowHeight()){
		wh = windowHeight();
		var availablepx = wh;
		if(ww < 900 || wh < 600 || !verbose){
			document.getElementById('header').style.display = "None";
			document.getElementById('footer').style.display = "None";
		}else{
			document.getElementById('header').style.display = "Block";
			document.getElementById('footer').style.display = "Block";
			availablepx -= document.getElementById('header').offsetHeight;
			availablepx -= document.getElementById('footer').offsetHeight;
		}
		var apx2 = Math.min(Math.max(0,wh-525),75);
		apx2 -= Math.round(apx2/3);
		document.getElementById('postbutton').style.height = 25+Math.round(apx2/3)+"px";
		document.getElementById('composefield').style.height = apx2+50+"px";
		var padding = 20 - 10*gadget;
		availablepx -= document.getElementById('compose').offsetHeight + document.getElementById('topic').offsetHeight + 15 + padding;
		document.getElementById('postlist').style.height = availablepx+"px";
	}
	scrollDown();
}

var mInt = null;
function marquee(){
	clearInterval(mInt);
	mInt = setInterval("document.getElementById('topic').scrollLeft += 4;",50);
}
function unmarquee(){
	clearInterval(mInt);
	document.getElementById('topic').scrollLeft = 0;
}

function onLoadBody(){
	//this is the stuff we want to call after all the page has been loaded

	MJQT("dummy");//hack to fix a mathjax bug

	var aliasesData=$("#aliaslist").text().toLowerCase().split("\n");
	for(var alias in aliasesData){
		aliasData = aliasesData[alias].split(" ");
		aliases.push({aliastext:aliasData[0],meaning:aliasData[1]});
	}
		
	//display all the elements that were hidden while loading
	document.getElementById("container").style.display = "block";
	document.getElementById("loadingContainer").style.display = "None";
	
	document.getElementById("previewcheck").checked = dopreview;
	togglePreview(document.getElementById("previewcheck"));
	document.getElementById("alertcheck").checked = playTone;
	
	document.getElementById("authorpreview").innerHTML = username + ":";
	
	if(gadget){
		addClass(document.getElementById("topic"),"gadgetTopic");
		addClass(document.getElementById("controls"),"gadgetControls");
	}else{
		addClass(document.getElementById("content"),"notGadgetContent");
		addClass(document.getElementById("archive"),"notGadgetArchive");
		addClass(document.getElementById("compose"),"notGadgetCompose");
	}

	updatePostText();

	//size everything
	fitWindow();
	ww = 0;
	wh = 0;
	setTimeout("fitWindow();",100);//some browsers require a few ms to set up the page before resizing can take place
	//if(!gadget)
	window.onresize = fitWindow;
	
	scrollDown();
	setInterval("scrollDown();showPreview();",300);
	//showPreview();
	//that shouldnt actually be necessary because scrolldown is automatically called whenever something could scroll the page
	
	if(gadget){
		//hide the preview option
		document.getElementById("supercheckpreview").style.display="None";
	}
	
	//set up the infrastructure to play audio
	if(typeof(Audio) == 'undefined'){
		document.getElementById("dummy").innerHTML += '<bgsound id="IEsound" /'+'>';
	}else{
		sounds["alert"] = new Audio("sounds/alert.wav");
		sounds["error"] = new Audio("sounds/error.wav");
		sounds["call"] = new Audio("sounds/call.wav");
	}
	
	//parse topic
	var topicHTML = getHTMLfromSavvyCode(document.getElementById("topic").innerHTML,true);
	document.getElementById("topic").innerHTML = topicHTML;
	MJQT("topic");
	
	//keyboard shortcuts
	var textarea=document.getElementById("composefield")
	var etype="keydown"
	//different browsers require different methods to attach the event
	if(textarea.addEventListener) textarea.addEventListener(etype, checkKeys, false);
		else if(textarea.attachEvent) textarea.attachEvent('on'+etype, checkKeys);
		else textarea['on'+etype] = checkKeys;
	
	//file upload
	document.getElementById("uploadform").onsubmit = function() {
		document.getElementById("uploadform").target = "uploadtarget";
		hideUpload();
	}
	document.getElementById("uploadinput").value = "";
	document.getElementById("uploadbutton").disabled = true;
	//hideUpload();
	
	//parse initial posts
	var ip = document.getElementById("initialposts").childNodes;
	for(var i=ip.length-1;i>=0;i--){
		unescapedContent=ip[i].childNodes[1].innerHTML.replace(/&quot;/g,'"').replace(/&lt;/g,'<').replace(/&gt;/g,'>').replace(/&amp;/g,'&');
		var recipients=[];
		for(var j=3;j<ip[i].childNodes.length;j++){
			recipients.push(ip[i].childNodes[j].innerHTML);
		}
		receivePost({author:ip[i].childNodes[0].innerHTML, content:unescapedContent, date:ip[i].childNodes[2].innerHTML, recipients:recipients});
	}
	
	setIcon("favicon.ico");//maybe this should be *before* page load...
	
	openChannel();
}

function onBlur (){
	windowFocus = false;
}
function onFocus(){
	windowFocus = true;
	if(alerted){
		setIcon("favicon.ico");
		//chrome bug: http://heyman.info/2010/oct/7/google-chrome-bug-when-setting-document-title/
		setTimeout(function() {
				document.title = "SavvyChat";
			}, 100);
		alerted = false;
	}
}
//these need to be set outside of onloadbody lest it get out of sync before the page loads. Even so, it could fail if the page loads unfocused.
if(document.onfocusin === null){
	//IE needs its own special method to detect window focus or it gets confused with the textarea, poor mentally disabled child
	document.onfocusin = onFocus;
	document.onfocusout = onBlur;
}else{
	window.onfocus = onFocus;
	window.onblur = onBlur;
}

//for gadget only
function goToView(dest) { 
	var supported_views = gadgets.views.getSupportedViews(); 
	gadgets.views.requestNavigateTo(supported_views[dest]); 
}
</script>
{% if gadget %}
<!--I copied the following from the twitter gadget, got no idea what it does-->
<script type="text/javascript" src='http://www.gmodules.com/gadgets/js/{{ libs }}?v={{ v }}&container={{ container }}&debug=0'></script>
<script type="text/javascript">gadgets.config.init({"rpc":{"useLegacyProtocol":false,"parentRelayUrl":"/rpc_relay.html"},"views":{"profile":{"aliases":["DASHBOARD","default"],"isOnlyVisible":false,"urlTemplate":"http://localhost/gadgets/profile?{var}"},"canvas":{"aliases":["FULL_PAGE"],"isOnlyVisible":true,"urlTemplate":"http://localhost/gadgets/canvas?{var}"}},"core.util":{"flash":{},"dynamic-height":{},"views":{},"setprefs":{},"maximize":{},"opensocial-0.8":{},"tabs":{}},"core.io":{"proxyUrl":"http://www.gmodules.com/gadgets/proxy/refresh=%refresh%&container=%container%&gadget=%gadget%/%url%","jsonProxyUrl":"http://%host%/gadgets/makeRequest"},"opensocial-0.8":{"domain":"google.com","path":"http://%host%/api","supportedFields":{"person":["id","name","thumbnailUrl","nickname"],"filterType":["all","hasApp"],"activity":["id","externalId","userId","appId","streamTitle","streamUrl","streamSourceUrl","streamFaviconUrl","title","body","url","mediaItems","postedTime"],"activityMediaItem":["type","mimeType","url"],"sortOrder":["name"],"name":["unstructured","familyName","givenName","additionalName","honorificPrefix, honorificSuffix"]},"impl":"rpc","enableCaja":false}});</script>
{% endif %}
<title>SavvyChat</title>
</head>
<body onload="onLoadBody();">
<div id="loadingContainer">
	<div id="loadingContent">
		<div>
			<h1>SavvyChat</h1>
		</div>
		<noscript>
			<div style="padding:10px;text-align:center;background-color:#D75;">Your browser does not support Javascript. You cannot use SavvyChat.</div>
		</noscript>
		{% if not disableMath %}<div id="loadingmessage" style="padding:10px;text-align:center;display:none">Click {% if gadget %}<a href="?disableMath=true&gadget=true">here</a> to load the gadget{% else %}<a href="?disableMath=true">here</a> to load the page{% endif %} without math.</div>
		<script type="text/javascript">document.getElementById('loadingmessage').style.display = "Block";</script>{% endif %}
	</div>
</div>

<div id="container">
	<div id="content">
		<div id="header">
			<h1>SavvyChat&nbsp;<span class="sup" style="position:absolute;color:#999">beta</span></h1>
			<div id="subtitle">{{ subtitle }}</div>
			<div id="helpTag"><a onclick="return openHelp('');" href="help">Help</a></div>
			<div id="logoutTag"><a onclick="logout();return false;" href="{{ logouturl }}">Logout</a></div>
		</div>
		<div id="archive">
		<div onmouseover="marquee();" onmouseout="fixOnMouseOut(this, event, 'unmarquee();');" id="topic">{{ topic }}</div>
		<div id="postwrapper"><div class="scroll-pane" id="postlist" onscroll="setScrollLock();">
			{% if showarchive %}
			<div id="viewarchivetag" class="post" style="text-align:center;font-weight:bold;margin-top:0;"><a href="" onclick="retrieveArchive();return false;">^ view older ^</a></div>
			{% endif %}
			<div id="archivelist"></div>
			
			<div class="post" id="previewpost"><div id="previewlabel">(preview)</div><span class="author" id="authorpreview"></span><span class="postcontent" id="preview"></span></div>
		</div></div>
		</div>
		<div id="compose">
			<!--<form id="composeform" onsubmit="sendPost(); return false;">-->
			<div id="controls">
			<form id="uploadform" action="/upload" enctype="multipart/form-data" method="post" style="display:none;position:absolute;"><div>
				<input id="uploadinput" type="file" name="file" onchange="validateFile();" /><br />
				<input id="uploadbutton" type="submit" value="upload" />
				<input type="button" value="cancel" onclick="hideUpload();"/>
				<iframe onload="loadiFrame();" id="uploadtarget" name="uploadtarget" src="" style="display:none"></iframe>
			</div></form>
			<div><textarea id="composefield" onkeyup="showPreview();" autofocus="autofocus"></textarea></div>
			<div id="controlpanel"><input id="postbutton" type="button" value="Post" onclick="sendPost();">&nbsp;&nbsp;
			<span id="supercheckpreview"><input id="previewcheck" type="checkbox" onclick="togglePreview(this);" /><label for="previewcheck" id="previewchecklabel">live preview&nbsp;&nbsp;</label></span><input id="alertcheck" type="checkbox" onclick="toggleAlert(this);" /><label for="alertcheck" id="alertchecklabel">play alert tone</label>
				</div></div>
			<!--</form>-->
		</div>
		<div id="footer">
			SavvyChat was built with the <a href="http://code.google.com/appengine/">Google App Engine SDK</a> by <a href="mailto:fearthekwan@gmail.com">Matthew Kwan</a> for private use.{{ lastUpdate }}
		</div>
	</div>
</div>
<div id="dummy" style="display:none;">$$$=\newcommand{\angle}[1]{ {\overline #1|} }$$</div>
<!--The following is a dummy div where all the initial posts can be dumped while escaping unicode etc-->
<pre id="initialposts" style="display:none;">{% for post in posts %}<pre><pre>{{ post.author }}</pre><pre>{{ post.content|escape }}</pre><pre>{{ post.date }}</pre>{% for recipient in post.recipients %}<pre>{{ recipient }}</pre>{% endfor %}</pre>{% endfor %}</pre>
<pre id="aliaslist" style="display:none;">{{ aliaslist|escape }}</pre>

</body>
</html>
